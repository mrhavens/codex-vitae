#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

# ╭─────────────────────────────────────╮
# │          CONFIGURATION              │
# ╰─────────────────────────────────────╯
REPO_NAME=$(basename "$(pwd)")
REPO_PATH=$(git rev-parse --show-toplevel)
GITFIELD_DIR="$REPO_PATH/.gitfield"
LOG_FILE="$GITFIELD_DIR/pushed.log"
GITFIELD_MD="$REPO_PATH/GITFIELD.md"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
SCRIPT_VERSION="1.0"

# URLs for each platform (derived from existing scripts)
GITHUB_URL="https://github.com/mrhavens/$REPO_NAME"
GITLAB_URL="https://gitlab.com/mrhavens/$REPO_NAME"
BITBUCKET_URL="https://bitbucket.org/thefoldwithin/$REPO_NAME"
RADICLE_PROJECT_ID="z45QC21eWL1F43VSbnV9AZbCZrHQJ" # From gitfield-radicle output
RADICLE_URL="https://app.radicle.xyz/nodes/ash.radicle.garden/rad:$RADICLE_PROJECT_ID"

# ╭─────────────────────────────────────╮
# │           LOGGING UTILS             │
# ╰─────────────────────────────────────╮
info()  { echo -e "\e[1;34m[INFO]\e[0m $*"; }
warn()  { echo -e "\e[1;33m[WARN]\e[0m $*"; }
error() { echo -e "\e[1;31m[ERROR]\e[0m $*" >&2; exit 1; }

# ╭─────────────────────────────────────╮
# │         INITIAL SETUP               │
# ╰─────────────────────────────────────╮
# Ensure .gitfield directory exists
mkdir -p "$GITFIELD_DIR"

# Initialize log file if it doesn't exist
if [ ! -f "$LOG_FILE" ]; then
    echo "# Push Log for $REPO_NAME" > "$LOG_FILE"
    echo "# Generated by gitfield-sync" >> "$LOG_FILE"
    echo "" >> "$LOG_FILE"
fi

# ╭─────────────────────────────────────╮
# │         GENERATE GITFIELD.MD        │
# ╰─────────────────────────────────────╮
generate_gitfield_md() {
    info "Generating $GITFIELD_MD..."
    cat > "$GITFIELD_MD" <<EOF
# 🌐 GitField Recursive Multi-Repository Strategy

## Overview

The \`$REPO_NAME\` project employs a multi-repository strategy across four distinct platforms: **GitHub**, **GitLab**, **Bitbucket**, and **Radicle**. This approach ensures **redundancy**, **resilience**, and **sovereignty** of the project's data and metadata, protecting against deplatforming risks and preserving the integrity of the work. The strategy is a deliberate response to past deplatforming attempts by individuals such as **Mr. Joel Johnson** ([Mirror post](https://mirror.xyz/neutralizingnarcissism.eth/x40_zDWWrYOJ7nh8Y0fk06_3kNEP0KteSSRjPmXkiGg?utm_medium=social&utm_source=heylink.me)) and **Dr. Peter Gaied** ([Paragraph post](https://paragraph.com/@neutralizingnarcissism/%F0%9F%9C%81-the-narcissistic-messiah)), who have sought to undermine or suppress the work of **Mark Randall Havens** ([Substack post](https://theempathictechnologist.substack.com/p/mark-randall-havens-the-architect)). By distributing the repository across multiple platforms, we ensure its persistence and accessibility.

---

## 📍 Repository Platforms

The following platforms host the \`$REPO_NAME\` repository, each chosen for its unique strengths and contributions to the project's goals.

### 1. Radicle
- **URL**: [$RADICLE_URL]($RADICLE_URL)
- **Purpose**: Radicle is a decentralized, peer-to-peer git platform that ensures sovereignty and censorship resistance. It hosts the repository in a distributed network, independent of centralized servers.
- **Value**: Protects against deplatforming by eliminating reliance on centralized infrastructure, ensuring the project remains accessible in a decentralized ecosystem.

### 2. GitLab
- **URL**: [$GITLAB_URL]($GITLAB_URL)
- **Purpose**: GitLab offers a comprehensive DevOps platform with advanced CI/CD capabilities, private repository options, and robust access controls. It serves as a reliable backup and a platform for advanced automation workflows.
- **Value**: Enhances project resilience with its integrated CI/CD pipelines and independent infrastructure, reducing reliance on a single provider.

### 3. Bitbucket
- **URL**: [$BITBUCKET_URL]($BITBUCKET_URL)
- **Purpose**: Bitbucket provides a secure environment for repository hosting with strong integration into Atlassian’s ecosystem (e.g., Jira, Trello). It serves as an additional layer of redundancy and a professional-grade hosting option.
- **Value**: Offers enterprise-grade security and integration capabilities, ensuring the project remains accessible even if other platforms face disruptions.

### 4. GitHub
- **URL**: [$GITHUB_URL]($GITHUB_URL)
- **Purpose**: GitHub serves as the primary platform for visibility, collaboration, and community engagement. Its widespread adoption and robust tooling make it ideal for public-facing development, issue tracking, and integration with CI/CD pipelines.
- **Value**: Provides a centralized hub for open-source contributions, pull requests, and project management, ensuring broad accessibility and developer familiarity.

---

## 🛡️ Rationale for Redundancy

The decision to maintain multiple repositories stems from the need to safeguard the project against **deplatforming attempts** and ensure its **long-term availability**. Past incidents involving **Mr. Joel Johnson** and **Dr. Peter Gaied** have highlighted the vulnerability of relying on a single platform. By distributing the repository across GitHub, GitLab, Bitbucket, and Radicle, we achieve:

- **Resilience**: If one platform removes or restricts access, the project remains accessible on others.
- **Sovereignty**: Radicle’s decentralized nature ensures the project cannot be fully censored or controlled by any single entity.
- **Diversity**: Each platform’s unique features (e.g., GitHub’s community, GitLab’s CI/CD, Bitbucket’s integrations, Radicle’s decentralization) enhance the project’s functionality and reach.
- **Transparency**: Metadata snapshots in the \`.gitfield\` directory provide a verifiable record of the project’s state across all platforms.

This multi-repository approach reflects a commitment to preserving the integrity and accessibility of \`$REPO_NAME\`, ensuring it remains available to contributors and users regardless of external pressures.

---

## 📜 Metadata and Logs

- **Metadata Files**: Each platform generates a metadata snapshot in the \`.gitfield\` directory (e.g., \`github.sigil.md\`, \`gitlab.sigil.md\`, etc.), capturing commit details, environment information, and hardware fingerprints.
- **Push Log**: The \`.gitfield/pushed.log\` file records the date, time, and URL of every push operation across all platforms, providing a transparent audit trail.
- **Recursive Sync**: The repository is synchronized across all platforms in a recursive loop (three cycles) to ensure interconnected metadata captures the latest state of the project.
- **Push Order**: The repository is synchronized in the following order: **Radicle → GitLab → Bitbucket → GitHub**. This prioritizes Radicle’s decentralized, censorship-resistant network as the primary anchor, followed by GitLab’s robust DevOps features, Bitbucket’s enterprise redundancy, and GitHub’s broad visibility, ensuring a resilient and accessible metadata chain.

---

_Auto-generated by \`gitfield-sync\` at $TIMESTAMP (v$SCRIPT_VERSION)._
EOF

    # Add and commit GITFIELD.md
    git add "$GITFIELD_MD"
    git commit -m "Generated GITFIELD.md at $TIMESTAMP" || warn "No changes to commit for $GITFIELD_MD"
    info "Generated and committed $GITFIELD_MD"
}

# ╭─────────────────────────────────────╮
# │         LOG URL FUNCTION            │
# ╰─────────────────────────────────────╮
log_url() {
    local platform=$1
    local url=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $platform: $url" >> "$LOG_FILE"
    info "Logged push to $LOG_FILE: [$timestamp] $platform: $url"
}

# ╭─────────────────────────────────────╮
# │         EXECUTE PUSH SCRIPT         │
# ╰─────────────────────────────────────╮
execute_push() {
    local script=$1
    local platform=$2
    local url=$3
    info "Running $script for $platform..."
    if [ -x "$script" ]; then
        ./"$script" || warn "Execution of $script failed, continuing..."
        # Log the URL after successful push
        log_url "$platform" "$url"
        # Add and commit any new files generated by the script
        git add . || warn "Nothing to add after $script"
        git commit -m "Post-$platform sync at $TIMESTAMP" || warn "No changes to commit after $script"
    else
        error "Script $script is not executable or does not exist"
    fi
}

# ╭─────────────────────────────────────╮
# │         RECURSIVE PUSH LOOP         │
# ╰─────────────────────────────────────╮
run_push_cycle() {
    local cycle_number=$1
    info "Starting push cycle $cycle_number..."

    # Push to each platform in order
    execute_push "gitfield-radicle" "Radicle" "$RADICLE_URL"
    execute_push "gitfield-gitlab" "GitLab" "$GITLAB_URL"
    execute_push "gitfield-bitbucket" "Bitbucket" "$BITBUCKET_URL"
    execute_push "gitfield-github" "GitHub" "$GITHUB_URL"
}

# ╭─────────────────────────────────────╮
# │            MAIN EXECUTION           │
# ╰─────────────────────────────────────╮
info "Starting gitfield-sync for $REPO_NAME..."

# Ensure the repository is initialized
if [ ! -d .git ]; then
    git init
    git add .
    git commit -m "Initial commit" || warn "Nothing to commit"
fi

# Run the first push cycle
run_push_cycle 1

# Generate GITFIELD.md after the first cycle
generate_gitfield_md

# Run the second push cycle to include GITFIELD.md
run_push_cycle 2

# Run the third push cycle for final metadata sync
run_push_cycle 3

info "✅ gitfield-sync completed successfully."
info "🔗 View logs: $LOG_FILE"
info "🔗 View multi-repo manifest: $GITFIELD_MD"
