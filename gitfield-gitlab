#!/bin/bash
IFS=$'\n\t'

# Configuration
GIT_REMOTE_NAME="gitlab"
REPO_NAME=$(basename "$(pwd)") || REPO_NAME="Unknown"
DEFAULT_NAME="Mark Randall Havens"
DEFAULT_EMAIL="mark.r.havens@gmail.com"
GITLAB_WEB="https://gitlab.com"
GITLAB_API="$GITLAB_WEB/api/v4"
GITLAB_SSH="git@gitlab.com"
TOKEN_FILE="$HOME/.gitfield_token"
SCRIPT_VERSION="1.0"
MARKDOWN_FILE="$(git rev-parse --show-toplevel)/.gitfield/gitlab.sigil.md" && mkdir -p "$(dirname "$MARKDOWN_FILE")"

info()  { echo -e "\e[1;34m[INFO]\e[0m $*"; }
warn()  { echo -e "\e[1;33m[WARN]\e[0m $*"; }
error() { echo -e "\e[1;31m[ERROR]\e[0m $*" >&2; exit 1; }

# Function to generate markdown file
generate_markdown() {
  info "Generating markdown file: $MARKDOWN_FILE"
  TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "Unknown")
  DEFAULT_BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null || echo "Unknown")
  REPO_PATH=$(git rev-parse --show-toplevel)
  LATEST_SHA=$(git rev-parse HEAD 2>/dev/null || echo "Unknown")
  LAST_COMMIT_MSG=$(git log -1 --pretty=format:"%s" 2>/dev/null || echo "Unknown")
  LAST_COMMIT_DATE=$(git log -1 --pretty=format:"%ad" 2>/dev/null || echo "Unknown")
  LAST_COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an <%ae>" 2>/dev/null || echo "Unknown")
  TOTAL_COMMITS=$(git rev-list --count HEAD 2>/dev/null || echo "Unknown")
  TRACKED_FILES=$(git ls-files 2>/dev/null | wc -l 2>/dev/null || echo "Unknown")
  UNCOMMITTED=$(if ! git diff --quiet 2>/dev/null || ! git diff --cached --quiet 2>/dev/null; then echo "Yes"; else echo "No"; fi)
  LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "None")
  HOSTNAME=$(hostname 2>/dev/null || echo "Unknown")
  CURRENT_USER=$(whoami 2>/dev/null || echo "Unknown")
  TIMEZONE=$(date +%Z 2>/dev/null || echo "Unknown")
  OS_NAME=$(uname -s 2>/dev/null || echo "Unknown")
  KERNEL_VERSION=$(uname -r 2>/dev/null || echo "Unknown")
  ARCHITECTURE=$(uname -m 2>/dev/null || echo "Unknown")
  OS_PRETTY_NAME=$(grep PRETTY_NAME /etc/os-release 2>/dev/null | cut -d= -f2 | tr -d '"' || echo "Unknown")
  DOCKER_CHECK=$(grep -qE '/docker|/lxc' /proc/1/cgroup 2>/dev/null && echo "Yes" || echo "No")
  WSL_CHECK=$(grep -qi microsoft /proc/version 2>/dev/null && echo "Yes" || echo "No")
  VM_CHECK=$(systemd-detect-virt 2>/dev/null || echo "Unknown")
  UPTIME=$(uptime -p 2>/dev/null || echo "Unknown")
  MAC_ADDR=$(ip link 2>/dev/null | awk '/ether/ {print $2}' | head -n 1 2>/dev/null || echo "Unknown")
  LOCAL_IP=$(hostname -I 2>/dev/null | awk '{print $1}' 2>/dev/null || echo "Unknown")
  CPU_MODEL=$(grep -m1 'model name' /proc/cpuinfo 2>/dev/null | cut -d: -f2 | sed 's/^ //' 2>/dev/null || echo "Unknown")
  RAM_GB=$(awk '/MemTotal/ {printf "%.2f", $2/1024/1024}' /proc/meminfo 2>/dev/null || echo "Unknown")
  WEB_LINK="$GITLAB_WEB/$USERNAME/$REPO_NAME"

  cat > "$MARKDOWN_FILE" <<EOF
# 🔗 GitLab Repository Link

- **Repo Name**: \`$REPO_NAME\`
- **GitLab User**: \`$USERNAME\`
- **Remote URL**: [$WEB_LINK]($WEB_LINK)
- **Local Repo Path**: \`$REPO_PATH\`
- **Remote Label**: \`$GIT_REMOTE_NAME\`
- **Default Branch**: \`$DEFAULT_BRANCH\`
- **Repo Created**: \`$TIMESTAMP\`

---

## 📦 Commit Info

- **This Commit Timestamp**: \`$TIMESTAMP\`
- **This Commit SHA**: \`$LATEST_SHA\`
- **Last Commit Message**: \`$LAST_COMMIT_MSG\`
- **Last Commit Author**: \`$LAST_COMMIT_AUTHOR\`
- **Last Commit Date**: \`$LAST_COMMIT_DATE\`
- **This Commit URL**: [$WEB_LINK/-/commit/$LATEST_SHA]($WEB_LINK/-/commit/$LATEST_SHA)

---

## 📊 Repo Status

- **Total Commits**: \`$TOTAL_COMMITS\`
- **Tracked Files**: \`$TRACKED_FILES\`
- **Uncommitted Changes**: \`$UNCOMMITTED\`
- **Latest Tag**: \`$LATEST_TAG\`

---

## 🧽 Environment

- **Host Machine**: \`$HOSTNAME\`
- **Current User**: \`$CURRENT_USER\`
- **Time Zone**: \`$TIMEZONE\`
- **Script Version**: \`v$SCRIPT_VERSION\`

---

## 🧬 Hardware & OS Fingerprint

- **OS Name**: \`$OS_NAME\`
- **OS Version**: \`$OS_PRETTY_NAME\`
- **Kernel Version**: \`$KERNEL_VERSION\`
- **Architecture**: \`$ARCHITECTURE\`
- **Running in Docker**: \`$DOCKER_CHECK\`
- **Running in WSL**: \`$WSL_CHECK\`
- **Virtual Machine**: \`$VM_CHECK\`
- **System Uptime**: \`$UPTIME\`
- **MAC Address**: \`$MAC_ADDR\`
- **Local IP**: \`$LOCAL_IP\`
- **CPU Model**: \`$CPU_MODEL\`
- **Total RAM (GB)**: \`$RAM_GB\`

---

_Auto-generated by \`gitfield-gitlab\` push script._
EOF
}

# Main script
set -euo pipefail

# Token Handling
RESET_TOKEN=false
if [[ "${1:-}" == "--reset-token" ]]; then
  RESET_TOKEN=true
  rm -f "$TOKEN_FILE" 2>/dev/null || warn "Failed to remove token file"
  info "Token reset requested."
fi

if [ -f "$TOKEN_FILE" ] && [ "$RESET_TOKEN" = false ]; then
  TOKEN=$(cat "$TOKEN_FILE" 2>/dev/null || error "Failed to read token file")
  info "Using cached token from $TOKEN_FILE"
else
  echo
  echo "🔐 Paste your GitLab Personal Access Token (scopes: api, read_user, write_repository, write_ssh_key)"
  echo "→ Generate at: $GITLAB_WEB/-/user_settings/personal_access_tokens"
  read -rp "🔑 Token: " TOKEN
  echo "$TOKEN" > "$TOKEN_FILE" 2>/dev/null || warn "Failed to save token file"
  chmod 600 "$TOKEN_FILE" 2>/dev/null || warn "Failed to set token file permissions"
  info "Token saved for future use at $TOKEN_FILE"
fi

# Install Dependencies
sudo apt update -qq 2>/dev/null || warn "apt update failed, continuing..."
sudo apt install -y git curl jq openssh-client lsb-release 2>/dev/null || warn "Tool install failed, continuing..."

# Identity
git config --global user.name "$DEFAULT_NAME" 2>/dev/null || warn "Failed to set git user name"
git config --global user.email "$DEFAULT_EMAIL" 2>/dev/null || warn "Failed to set git user email"
info "Git identity set to: $DEFAULT_NAME <$DEFAULT_EMAIL>"

# Git Initialization
if [ ! -d .git ]; then
  git init 2>/dev/null || warn "Git init failed, continuing..."
  git add . 2>/dev/null || warn "Nothing to add"
  git commit -m "Initial commit" 2>/dev/null || warn "Nothing to commit"
fi

if ! git rev-parse HEAD &>/dev/null; then
  git add . 2>/dev/null && git commit -m "Initial commit" 2>/dev/null || warn "Nothing to commit"
fi

# SSH Setup
if [ ! -f ~/.ssh/id_rsa ]; then
  ssh-keygen -t rsa -b 4096 -C "$DEFAULT_EMAIL" -f ~/.ssh/id_rsa -N "" 2>/dev/null || error "SSH keygen failed"
fi

eval "$(ssh-agent -s 2>/dev/null)" || warn "Failed to start ssh-agent, continuing..."
ssh-add ~/.ssh/id_rsa 2>/dev/null || error "Failed to add SSH key"

# Fetch GitLab Username
USERNAME=$(curl -s --header "PRIVATE-TOKEN: $TOKEN" "$GITLAB_API/user" | jq -r '.username' 2>/dev/null) || error "Invalid token"
info "GitLab username: $USERNAME"

# SSH Key Upload to GitLab
SSH_TEST_OUTPUT=$(ssh -T "$GITLAB_SSH" 2>&1)
if ! echo "$SSH_TEST_OUTPUT" | grep -q "Welcome"; then
  warn "SSH test failed, attempting to upload SSH key. Output: $SSH_TEST_OUTPUT"
  PUBKEY=$(cat ~/.ssh/id_rsa.pub 2>/dev/null || warn "Failed to read SSH public key, continuing...")
  TITLE="AutoKey-$(hostname)-$(date +%s 2>/dev/null || echo 'unknown')"
  CURL_OUTPUT=$(curl -s --fail -X POST "$GITLAB_API/user/keys" \
    -H "PRIVATE-TOKEN: $TOKEN" \
    -H "Content-Type: application/json" \
    -d "{\"title\": \"$TITLE\", \"key\": \"$PUBKEY\"}" 2>&1)
  if [[ $? -ne 0 ]]; then
    warn "SSH key upload failed: $CURL_OUTPUT"
  else
    info "SSH key uploaded successfully."
    sleep 2
    SSH_TEST_OUTPUT=$(ssh -T "$GITLAB_SSH" 2>&1)
    if ! echo "$SSH_TEST_OUTPUT" | grep -q "Welcome"; then
      warn "SSH test still failing after key upload. Output: $SSH_TEST_OUTPUT"
    else
      info "SSH test passed after key upload."
    fi
  fi
else
  info "SSH test passed: $SSH_TEST_OUTPUT"
fi

# Set Up Remote Repository (non-critical, allow failures)
set +e
REMOTE_URL="$GITLAB_SSH:$USERNAME/$REPO_NAME.git"
info "Checking if remote '$GIT_REMOTE_NAME' exists..."
REMOTE_EXISTS=$(git remote get-url "$GIT_REMOTE_NAME" 2>&1)
REMOTE_EXIT_CODE=$?
info "git remote get-url output: $REMOTE_EXISTS"
info "git remote get-url exit code: $REMOTE_EXIT_CODE"

if [[ $REMOTE_EXIT_CODE -ne 0 ]]; then
  info "Remote '$GIT_REMOTE_NAME' not found, setting up..."
  CURL_OUTPUT=$(curl -s --fail -X POST "$GITLAB_API/projects" \
    -H "PRIVATE-TOKEN: $TOKEN" \
    -H "Content-Type: application/json" \
    -d "{\"name\": \"$REPO_NAME\", \"visibility\": \"public\"}" 2>&1)
  if [[ $? -ne 0 ]]; then
    warn "Failed to create GitLab project: $CURL_OUTPUT"
    PROJECT_EXISTS=$(curl -s --header "PRIVATE-TOKEN: $TOKEN" "$GITLAB_API/projects?search=$REPO_NAME" | jq -r '.[] | select(.name == "'"$REPO_NAME"'") | .id' 2>&1)
    if [[ $? -ne 0 || -z "$PROJECT_EXISTS" ]]; then
      warn "Project creation failed and project does not exist: $PROJECT_EXISTS"
      info "Proceeding with remote URL anyway: $REMOTE_URL"
    else
      info "Project already exists on GitLab."
    fi
  else
    info "GitLab project created successfully."
  fi
  git remote add "$GIT_REMOTE_NAME" "$REMOTE_URL" 2>/dev/null || warn "Failed to add remote, but continuing..."
  info "Remote set to: $REMOTE_URL"
else
  info "Remote already configured: $REMOTE_EXISTS"
fi
set -e

# Generate markdown file (always run this step)
generate_markdown

# Commit and Push (non-critical, allow failures)
set +e
info "Committing markdown file..."
git add "$MARKDOWN_FILE" 2>/dev/null || warn "Failed to add markdown file"
git commit -m "GitLab metadata link commit at $TIMESTAMP — $WEB_LINK/-/commit/$LATEST_SHA" 2>/dev/null || warn "No changes to commit"

info "Pushing to GitLab..."
git push -u "$GIT_REMOTE_NAME" "$DEFAULT_BRANCH" 2>/dev/null || warn "Push to GitLab failed"
echo -e "\n🔗 View in browser: $WEB_LINK\n"
set -e
